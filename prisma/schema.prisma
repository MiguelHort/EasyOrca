generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabela de Usuário (funcionário)
model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String
  phone        String?
  userName     String?   @unique
  profileImage String?   @default("default.jpg")
  createdAt    DateTime  @default(now())

  // Relacionamento: Um usuário pertence a uma empresa
  companyId    String?   // Tornar opcional para permitir usuários sem empresa
  // Relacionamento: Um usuário pertence a uma empresa, mas pode ser nulo
  company      Company?  @relation(fields: [companyId], references: [id])

  // Relacionamento: Um usuário cria muitos orçamentos
  orcamentos   Orcamento[]
}

// NOVA TABELA: Empresa
model Company {
  id        String    @id @default(uuid())
  name      String    // Anteriormente companyName
  image     String?   @default("default.jpg") // Anteriormente companyImage
  createdAt DateTime  @default(now())

  // Relacionamento: Uma empresa tem muitos usuários (funcionários)
  users     User[]
  // Relacionamento: Uma empresa tem muitos clientes
  clientes  Cliente[]
  // Relacionamento: Uma empresa oferece muitos serviços
  servicos  Servico[]
}

model Cliente {
  id        String    @id @default(uuid())
  nome      String
  email     String?
  telefone  String?
  createdAt DateTime  @default(now())

  // Relacionamento: Um cliente pertence a uma empresa
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])

  orcamentos Orcamento[]
}

model Servico {
  id          String   @id @default(uuid())
  nome        String
  preco       Decimal
  createdAt   DateTime @default(now())

  // Relacionamento: Um serviço pertence a uma empresa
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])

  orcamentoServicos OrcamentoServico[]

  // Garante que o nome do serviço é único por empresa
  @@unique([nome, companyId])
}

model Orcamento {
  id         String   @id @default(uuid())
  descricao  String?
  valorTotal Decimal
  status     String   @default("enviado")
  createdAt  DateTime @default(now())

  // Relacionamento: O orçamento ainda é criado por um usuário específico
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  // Relacionamento: O orçamento é para um cliente
  clienteId  String
  cliente    Cliente  @relation(fields: [clienteId], references: [id])

  itens      OrcamentoServico[]
}

model OrcamentoServico {
  id            String    @id @default(uuid())
  precoUnitario Decimal
  quantidade    Int       @default(1)
  orcamentoId   String
  servicoId     String
  orcamento     Orcamento @relation(fields: [orcamentoId], references: [id])
  servico       Servico   @relation(fields: [servicoId], references: [id])
}